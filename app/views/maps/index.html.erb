<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <!-- <title>InfoBubble</title> -->
    <style type="text/css">
      body {
        font-size: 83%;
      }

      body, input, textarea {
        font-family: arial, sans-serif;
      }

      #map_canvas {
        width: 980px;
        height: 650px;
      }
    </style>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript">
      // NOTE:  This code relies upon the zIndex property of the markers as the storage mechanism for the index of the retailers array.  This is used for the addTabs() function which
      // has to take place at the time of the marker "onclick" event because it does not work out when  you try to build all the tabs in the main "iterator" loop.  What happens is that
      // the tabs are built not in the loop but after it, so the value of "iterator", used to pull data from the retailers array is always the last, highest value so that the content for
      // each infobubble is the same: set as the last value of iterator so it just always gets the last retailer
      // NOTE: "bubbles[ bubbles.length - 1 ]" is used throughout the "iterator" loop to reference the current array element as each new element is pushed: "bubbles.push( infoBubble );"
      var retailers = [];
      var titles = [];
      
      var dealmarkers = [];
      var dealbubbles = [];
      var iterator = 0;
      
      var alertmarkers = [];
      var alertbubbles = [];
      var alertiterator = 0;
      
      // Set up dynamic data for the deal markers
      var locations = [
        <% @locations.each_with_index do |loc, idx| %>
         new google.maps.LatLng(<%=loc.latitude %>, <%=loc.longitude %>),
        <% end %>
      ];
      // one record per retailer with a deal or deals
      <% sep = "@-@i@-@" %>
      <% @locations.each_with_index do |loc, idx| %>
        <% address = "#{loc.address} #{loc.city}, #{loc.state}"  %>
        retailers.push( "<div id='infobubble'><%= loc.name %><br><%= loc.address %><br><%= loc.phone %><br><%= loc.url %><br>" )
        titles.push( "<%= loc.name %>" )
        // Now loop through @deals and match up the retailer_id with the loc.id in retailers and add the deals
        <% deal_cntr = 0  %>
        <% @deals.each do |deal| %>
          <% if deal.retailer_id == loc.id %>
            <%= deal_cntr += 1 %>
            <% if deal_cntr <= 3  %>
              <% if deal.image_url then deal_image_tag = "<img src='#{deal.image_url}'/>" else deal_image_tag = "" end  %> 
              retailers[<%= idx %>] = retailers[<%= idx %>] + ("<%= sep %><img alt='image here' height='66' src='<%= deal.image_url %>' width='66' /><br><%= deal.name %>")
            <% end  %>
           <% end %>
        <% end  %>
        // now trim off the loc.id from the front of the string for each array element
        retailers[<%= idx %>] = retailers[<%= idx %>].substr( retailers[<%= idx %>].indexOf("|") + 1, retailers[<%= idx %>].length );
        // and add the final "</div>" to end the <div id='infowindow'>
        retailers[<%= idx %>] = retailers[<%= idx %>] + "<%= sep %></div>"
      <% end %>
      // retailers[0] = <div id='infowindow'>Home Depot<br>11682 Forest Central Dr<br>Dallas, TX  75243<br>(214) 343-1032<br>www.homedepot.com<br>@-@i@-@33% Off on all DeWalt Tools@-@i@-@$1.00 off 96" 2 x 4's@-@i@-@</div>
      // End of set up dynamic data

      // Set up marker data for the traffic alert markers
      var alerts = [
        <% @alerts.each_with_index do |cam, idx| %>
          new google.maps.LatLng(<%=cam.latitude %>, <%=cam.longitude %>),
        <% end %>
      ];
      
      var rating_descriptions = [
        <% @alerts.each_with_index do |cam, idx| %>
          "<%= cam.rating_description %>",
        <% end %>
      ];

      var ratings = [
        <% @alerts.each_with_index do |cam, idx| %>
          <%= cam.traffic_rating_id %>,
        <% end %>
      ];

      var alert_icons = [
        <% @alerts.each_with_index do |cam, idx| %>
          "/assets/list_alert_<%= cam.traffic_rating_id %>.png",
        <% end %>
      ];

      var compass_points = [
        <% @alerts.each_with_index do |cam, idx| %>
          "<%= cam.compass_point_name %>",
        <% end %>
      ];
      
      var camera_names = [
        <% @alerts.each_with_index do |cam, idx| %>
          "<%= cam.traffic_camera_name %>",
        <% end %>
      ];
      
      var alert_messages = [
        <% @alerts.each_with_index do |cam, idx| %>
          "<%= cam.alert_message %>",
        <% end %>
      ];
      // **************************************************************
      
      var startloc = new google.maps.LatLng(<%= @center_lat_lng[0] %>, <%= @center_lat_lng[1] %>);
      var map, infoBubble;
  
      function initialize() {
        var mapOptions = {
          zoom: 13,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          center: startloc
        };

        map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
        
        var you_are_here_marker = new google.maps.Marker(
           {
             position: new google.maps.LatLng(<%= params[:search]['current_lat'].to_f %>,<%= params[:search]['current_lng'].to_f %>),
             map: map,
             draggable: false,
             icon: "/assets/you_are_here.png",
             zIndex: 110
           })
        var circleOptions = {
          radius: <%= params[:search]['radius_distance'].to_f * 1000 %>,    // in meters
          fillColor: '#AA0000',
          fillOpacity: 0.0,
          strokeWeight: 1,
          strokeColor: "green",
          strokeOpacity: 0.33
        }  
        var circle = new google.maps.Circle({
          map: map,
          options: circleOptions // fillColor: '#AA0000'
        });
         circle.bindTo('center', you_are_here_marker, 'position');
        
        for (var idx = 0; idx < alerts.length; idx++) {
          addTrafficAlertMarker( idx );
        }

        // add the deal markers
        for (var i = 0; i < locations.length; i++) {
          setTimeout(function() {
            addDealMarker();
          }, i * 500);
        }
      } // initialize
  
      function addTrafficAlertMarker( idx ) {
        var alertmarker = new google.maps.Marker(
           {
             position: alerts[ idx ],
             map: map,
             draggable: false,
             icon: "/assets/map_alert_" + ratings[ idx ] + ".png",
             zIndex: -10
           })

           alertBubble = new InfoBubble({
             content: "alertBubble",
             minWidth: 200,
             maxWidth: 300,
             borderColor: "white",
             backgroundColor: '#90fe90', // same as the css background color for #alertbubble in map.css.scss
             borderWidth: 3,
             shadowStyle: 1,
             borderRadius: 5,
             padding: 4
             // hideCloseButton: true
           });
           var div = document.createElement('DIV');
           div.innerHTML = alertiterator;
           alertbubbles.push( alertBubble );

           google.maps.event.addListener(alertmarker, 'click', function() {
             if ( 'undefined' !== typeof( dealbubble ) ) { dealbubble.close(); } // close any open dealbubble
             alertbubble = alertbubbles[ alertbubbles.length - 1 ]
             alertbubble.open(map, alertmarker);
             if (alert_messages[ idx ].length > 0) { alertmsg = "<br>" + alert_messages[ idx ] } else { alertmsg = "" }
             alertbubble.setContent( 
               "<div id='alertbubble'>" + 
               camera_names[ idx ] + "<br>" + 
               compass_points[ idx ] + ": " + rating_descriptions[ idx ] + "<br>" +
               "<img src=" + alert_icons[ idx ] + ">" + 
               alertmsg + "</div>" )
           });

           alertmarkers.push( alertmarker );
           alertiterator++;

      } // function addTrafficAlertMarker( idx )
      
      function filler(){
        null // just used to delay the first drop
      };

      function drop() {
        for (var i = 0; i < locations.length; i++) {
          setTimeout(function() {
            addDealMarker();
          }, i * 500);
        }
      }
  
      function addDealMarker() {
        // alert(locations[iterator])
        var dealmarker = new google.maps.Marker(
          {
            position: locations[iterator],
            map: map,
            draggable: false,
            animation: google.maps.Animation.DROP,
            icon: '/assets/map_deal.png',
            zIndex: iterator  // NOTE: zIndex is used to store the index (iterator) of the dealmarkers array to retrieve tab and content data when the tabs are built onClick in the addTabs() method
          })

       infoBubble = new InfoBubble({
         content: "infoBubble",
         minWidth: 200,
         maxWidth: 300,
         borderColor: 'white',
         backgroundColor: '#82E2ED', // same as the css background color for #infobubble in map.css.scss
         borderWidth: 3,
         shadowStyle: 1,
         borderRadius: 5,
         padding: 4
       });
       var div = document.createElement('DIV');
       div.innerHTML = iterator;
       dealbubbles.push( infoBubble );
       dealbubbles[ dealbubbles.length - 1 ].addTab('Location', "<div id='content' style='width: 290px;'>Placeholder Content</div>");

       google.maps.event.addListener(dealmarker, 'click', function() {
         if ( 'undefined' !== typeof( alertbubble ) ) { alertbubble.close(); } // close any open alertbubble
         dealbubble = dealbubbles[ dealbubbles.length - 1 ]
         dealbubble.open(map, dealmarker);
         addTabs( dealmarker, dealbubble )
       });

       dealmarkers.push( dealmarker );
       iterator++;
       }; // function addDealMarker()
  
      function addTabs( dealmarker, bubble ) {
        // NOTE: the "5" here means that if there are 5 or more deals (tabs) then they will not all get removed and the remaining un-removed tab(s) will get mixed up with another location's tabs
        // so to have more than 4 tabs bump up the "5" higher
        // First remove all tabs except the one at index "0" ("Location" tab )
        for (var i = 1; i < 5; i++){ bubble.removeTab( 1 ); }
        // parse the string to get the retailer location
        var str = retailers[dealmarker.getZIndex()] 
        var location = str.split("@-@i@-@")[0]
        bubble.updateTab( 0, "Location", location )
        // parse the string to get the deal(s) out of it and loop over them to create tabs
        // split the string into an array
        deals = str.substring( str.indexOf( "<%= sep %>" ), str.length ).split( "<%= sep %>" )
        // has 2 more elements than deals so we discard the first and last elements
        deals.shift();
        deals.pop();
        // create the "Deal" tabs
        for (var cntr = 0; cntr < deals.length; cntr++) {
          var deal = deals[ cntr ];
          bubble.addTab( '&nbsp;Deal&nbsp;', "<div id='infobubble'>" + deal + "</div>" );
        }
 
       }; // function addTabs
      // retailers[0] = <div id='infowindow'>Home Depot<br>11682 Forest Central Dr<br>Dallas, TX  75243<br>(214) 343-1032<br>www.homedepot.com<br>@-@i@-@33% Off on all DeWalt Tools@-@i@-@$1.00 off 96" 2 x 4's@-@i@-@</div>

      function close_alertbubbles() {
        alert( typeof( alertbubble ) )
        // for (var i = 0; i < alertbubbles.length; i++) {
          // alertbubble.close();
          // alertbubbles[ i ].close();
        // }
      }
    </script>
  
    </head>
    <body>
      <!-- <h3>InfoBubble</h3> -->
      <div id="map_canvas"></div>

        <body onload="initialize(); setTimeout(function() {filler();}, 200);drop();">
    </body>
  </html>

<!-- <script type="text/javascript">
  var script = '<script type="text/javascript" src="http://google-maps-' +
      'utility-library-v3.googlecode.com/svn/trunk/infobubble/src/infobubble';
  if (document.location.search.indexOf('compiled') !== -1) {
    script += '-compiled';
  }
  script += '.js"><' + '/script>';
  document.write(script);
</script> -->
